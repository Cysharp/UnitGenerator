// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace UnitGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CodeTemplate : CodeTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("﻿");
            this.Write("#pragma warning disable CS8669\r\nusing System;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n");
 if (HasFlag(UnitGenerateOptions.JsonConverter)) { 
            this.Write(" \r\n\r\n");
 } 
 if (HasFlag(UnitGenerateOptions.MessagePackFormatter)) { 
            this.Write(" \r\n\r\n");
 } 
            this.Write("    [System.ComponentModel.TypeConverter(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("TypeConverter))]\r\n    public readonly partial struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" : IEquatable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasFlag(UnitGenerateOptions.Comparable) ? $", IComparable<{Type}>" : ""));
            this.Write("\r\n    {\r\n        readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" value;\r\n\r\n        public readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" AsPrimitive() => value;\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" value)\r\n        {\r\n            this.value = value;\r\n        }\r\n\r\n        public " +
                    "static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasFlag(UnitGenerateOptions.ImplicitOperator) ? "implicit" : "explicit"));
            this.Write(" operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        {\r\n            return value.value;\r\n        }\r\n\r\n        public " +
                    "static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasFlag(UnitGenerateOptions.ImplicitOperator) ? "implicit" : "explicit"));
            this.Write(" operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" value)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(value);\r\n        }\r\n\r\n        public bool Equals(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(@" other)
        {
            return this.Equals(other);
        }

        public override bool Equals(object? obj)
        {
            return value.Equals(obj);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override string ToString()
        {
");
 if (ToStringFormat == null) { 
            this.Write("            return \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(\" + value + \")\";\r\n");
 } else { 
            this.Write("            return string.Format(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToStringFormat));
            this.Write("\", value);\r\n");
 } 
            this.Write("        }\r\n\r\n        public static bool operator ==(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return x.Equals(y);\r\n        }\r\n\r\n        public stat" +
                    "ic bool operator !=(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return !x.Equals(y);\r\n        }\r\n\r\n");
 if (HasFlag(UnitGenerateOptions.ParseMethod)) { 
            this.Write(" \r\n\r\n\r\n");
 } 
            this.Write("\r\n");
 if (Type == "bool") { 
            this.Write("        \r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" operator true(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        {\r\n            return x.value;\r\n        }\r\n        \r\n        public " +
                    "static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" operator false(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        {\r\n            return !x.value;\r\n        }\r\n        \r\n        public" +
                    " static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" operator !(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        {\r\n            return !x.value;\r\n        }\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.ArithmeticOperator)) { 
            this.Write(" \r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator +(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value + y.value);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator -(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value - y.value);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value * y.value);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value / y.value);\r\n        }\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.ValueArithmeticOperator)) { 
            this.Write(" \r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator +(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value + y);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator -(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value - y);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value * y);\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" y)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x.value / y);\r\n        }\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.Comparable)) { 
            this.Write(" \r\n\r\n        public int CompareTo(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" other)\r\n        {\r\n            return value.CompareTo(other);\r\n        }\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.JsonConverter)) { 
            this.Write(" \r\n\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.MessagePackFormatter)) { 
            this.Write(" \r\n\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.DapperTypeHandler)) { 
            this.Write(" \r\n\r\n\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(UnitGenerateOptions.EntityFrameworkValueConverter)) { 
            this.Write(" \r\n\r\n\r\n");
 } 
            this.Write("\r\n        private class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("TypeConverter : System.ComponentModel.TypeConverter\r\n        {\r\n            priva" +
                    "te static readonly Type WrapperType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(");\r\n            private static readonly Type ValueType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(@");

            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)
            {
                if (sourceType == WrapperType || sourceType == ValueType)
                {
                    return true;
                }

                return base.CanConvertFrom(context, sourceType);
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)
            {
                if (destinationType == WrapperType || destinationType == ValueType)
                {
                    return true;
                }

                return base.CanConvertTo(context, destinationType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                if (value is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Type));
            this.Write(" underlyingValue)\r\n                {\r\n                    return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(underlyingValue);\r\n                }\r\n                \r\n                if (valu" +
                    "e is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" wrapperValue)
                {
                    return wrapperValue;
                }

                return base.ConvertFrom(context, culture, value);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)
            {
                if (value is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" wrappedValue)
                {
                    if (destinationType == WrapperType)
                    {
                        return wrappedValue;
                    }

                    if (destinationType == ValueType)
                    {
                        return wrappedValue.AsPrimitive();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
