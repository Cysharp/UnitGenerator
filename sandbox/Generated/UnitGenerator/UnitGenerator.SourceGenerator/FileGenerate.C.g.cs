// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT.
// </auto-generated>
#pragma warning disable CS8669
using System;
using System.Globalization;
#if NET7_0_OR_GREATER
using System.Numerics;
#endif
namespace FileGenerate
{
    [System.ComponentModel.TypeConverter(typeof(CTypeConverter))]
    readonly partial struct C 
        : IEquatable<C>
#if NET7_0_OR_GREATER
        , IEqualityOperators<C, C, bool>
#endif    
        , IComparable<C>
#if NET7_0_OR_GREATER
        , IComparisonOperators<C, C, bool>
#endif
#if NET7_0_OR_GREATER
        , IParsable<C>
#endif
        , IFormattable
#if NET7_0_OR_GREATER
        , IAdditionOperators<C, C, C>
        , ISubtractionOperators<C, C, C>
        , IMultiplyOperators<C, C, C>
        , IDivisionOperators<C, C, C>
        , IUnaryPlusOperators<C, C>
        , IUnaryNegationOperators<C, C>
        , IIncrementOperators<C>
        , IDecrementOperators<C>
#endif
    {
        readonly int value;

        public int AsPrimitive() => value;

        public C(int value)
        {
            this.value = value;
        }
        
        public static explicit operator int(C value)
        {
            return value.value;
        }

        public static explicit operator C(int value)
        {
            return new C(value);
        }

        public bool Equals(C other)
        {
            return value.Equals(other.value);
        }

        public override bool Equals(object obj)
        {
            if (obj == null) return false;
            var t = obj.GetType();
            if (t == typeof(C))
            {
                return Equals((C)obj);
            }
            if (t == typeof(int))
            {
                return value.Equals((int)obj);
            }

            return value.Equals(obj);
        }
        
        public static bool operator ==(C x, C y)
        {
            return x.value.Equals(y.value);
        }

        public static bool operator !=(C x, C y)
        {
            return !x.value.Equals(y.value);
        }

        public override int GetHashCode()
        {
            return value.GetHashCode();
        }

        public override string ToString() => value.ToString();

        public string ToString(string? format, IFormatProvider? formatProvider) => value.ToString(format, formatProvider);

        // UnitGenerateOptions.ParseMethod
        
        public static C Parse(string s)
        {
            return new C(int.Parse(s));
        }
 
        public static bool TryParse(string s, out C result)
        {
            if (int.TryParse(s, out var r))
            {
                result = new C(r);
                return true;
            }
            else
            {
                result = default(C);
                return false;
            }
        }

        public static C Parse(string s, IFormatProvider? provider)
        {
            return new C(int.Parse(s));
        }
 
        public static bool TryParse(string s, IFormatProvider? provider, out C result)
        {
            if (int.TryParse(s, out var r))
            {
                result = new C(r);
                return true;
            }
            else
            {
                result = default(C);
                return false;
            }
        }

        // UnitGenerateOptions.ArithmeticOperator
        
        public static C operator +(C x, C y)
        {
            checked
            {
                return new C((int)(x.value + y.value));
            }
        }

        public static C operator -(C x, C y)
        {
            checked
            {
                return new C((int)(x.value - y.value));
            }
        }

        public static C operator +(C value) => new((int)(+value.value));
        public static C operator -(C value) => new((int)(-value.value));

        public static C operator *(C x, C y)
        {
            checked
            {
                return new C((int)(x.value * y.value));
            }
        }


        public static C operator /(C x, C y)
        {
            checked
            {
                return new C((int)(x.value / y.value));
            }
        }

        public static C operator ++(C x)
        {
            checked
            {
                return new C((int)((int)(x.value + 1)));
            }
        }

        public static C operator --(C x)
        {
            checked
            {
                return new C((int)((int)(x.value - 1)));
            }
        }

        // UnitGenerateOptions.ValueArithmeticOperator
        
        public static C operator +(C x, int y)
        {
            checked
            {
                return new C((int)(x.value + y));
            }
        }

        public static C operator -(C x, int y)
        {
            checked
            {
                return new C((int)(x.value - y));
            }
        }

        public static C operator *(C x, int y)
        {
            checked
            {
                return new C((int)(x.value * y));
            }
        }


        public static C operator /(C x, int y)
        {
            checked
            {
                return new C((int)(x.value / y));
            }
        }

        // UnitGenerateOptions.Comparable

        public int CompareTo(C other)
        {
            return value.CompareTo(other.value);
        }
        public static bool operator >(C x, C y)
        {
            return x.value > y.value;
        }

        public static bool operator <(C x, C y)
        {
            return x.value < y.value;
        }

        public static bool operator >=(C x, C y)
        {
            return x.value >= y.value;
        }

        public static bool operator <=(C x, C y)
        {
            return x.value <= y.value;
        }

        // Default
        
        private class CTypeConverter : System.ComponentModel.TypeConverter
        {
            private static readonly Type WrapperType = typeof(C);
            private static readonly Type ValueType = typeof(int);

            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)
            {
                if (sourceType == WrapperType || sourceType == ValueType)
                {
                    return true;
                }

                return base.CanConvertFrom(context, sourceType);
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)
            {
                if (destinationType == WrapperType || destinationType == ValueType)
                {
                    return true;
                }

                return base.CanConvertTo(context, destinationType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                if (value != null)
                {
                    var t = value.GetType();
                    if (t == typeof(C))
                    {
                        return (C)value;
                    }
                    if (t == typeof(int))
                    {
                        return new C((int)value);
                    }
                }

                return base.ConvertFrom(context, culture, value);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)
            {
                if (value is C wrappedValue)
                {
                    if (destinationType == WrapperType)
                    {
                        return wrappedValue;
                    }

                    if (destinationType == ValueType)
                    {
                        return wrappedValue.AsPrimitive();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }
    }
}
